import { NextRequest, NextResponse } from "next/server";
import fs from "fs/promises";
import { db } from "@/drizzle/db";
import { downloadVerificationTable, productsTable } from "@/drizzle/schema";
import { and, eq, gt } from "drizzle-orm";

export async function GET(
  req: NextRequest,
  {
    params: { downloadVerificationId },
  }: { params: { downloadVerificationId: string } }
) {
  //   const data = await db.downloadVerification.findUnique({
  //     where: { id: downloadVerificationId, expiresAt: { gt: new Date() } },
  //     select: { product: { select: { filePath: true, name: true } } },
  //   })

  const now = new Date();

  const [data] = await db
    .select({
      filePath: productsTable.filePath,
      name: productsTable.name,
    })
    .from(downloadVerificationTable)
    .innerJoin(
      productsTable,
      eq(downloadVerificationTable.productId, productsTable.id)
    )
    .where(
      and(
        eq(downloadVerificationTable.id, downloadVerificationId),
        gt(downloadVerificationTable.expiresAt, now)
      )
    )
    .limit(1);
  //   return result[0] ?? null;

  if (data == null) {
    return NextResponse.redirect(
      new URL("/products/download/expired", req.url)
    );
  }

  const { size } = await fs.stat(data.filePath);
  const file = await fs.readFile(data.filePath);
  const extension = data.filePath.split(".").pop();

  return new NextResponse(file, {
    headers: {
      "Content-Disposition": `attachment; filename="${data.name}.${extension}"`,
      "Content-Length": size.toString(),
    },
  });
}
